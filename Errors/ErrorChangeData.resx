<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbIcon.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        U6YAAAAASUVORK5CYII=
</value>
  </data>
</root>