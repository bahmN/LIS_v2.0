<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbIcon.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YtdGo5H8H0N+V90lj1OmAAAAAElFTkSuQmCC
</value>
  </data>
</root>